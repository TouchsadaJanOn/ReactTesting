{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\jano2187\\\\Documents\\\\GitHub\\\\ReactTesting\\\\front_end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\jano2187\\\\Documents\\\\GitHub\\\\ReactTesting\\\\front_end\\\\src\\\\pages\\\\QuestionPage\\\\ViewQuestions.js\";\nimport React, { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from \"uuid\";\nimport './ViewQuestion.css';\nexport default function ViewQuestions() {\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      questions = _useState2[0],\n      setQuestions = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      update = _useState4[0],\n      setUpdate = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      comment = _useState6[0],\n      setComment = _useState6[1];\n\n  useEffect(function () {\n    fetch('http://localhost:9001/users/viewQuestion').then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      return setQuestions(data);\n    });\n  }, [update]);\n\n  var question_vote = function question_vote(id, votes) {\n    var newVotes = votes == null ? 1 : votes + 1;\n    var updatequestion = {\n      'id': id,\n      'votes': newVotes\n    };\n    fetch('http://localhost:9001/users/viewQuestion', {\n      method: 'PATCH',\n      body: JSON.stringify(updatequestion),\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\"\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(setUpdate(update + 1)).then(console.log(\"Vote count completed\"));\n  };\n\n  var submitComment = function submitComment(questionID) {\n    var id = uuidv4();\n    var qID = questionID;\n    var addComment = {\n      'id': id,\n      'qID': qID,\n      'comment': comment\n    };\n    fetch('http://localhost:9001/comment/question_comment', {\n      method: 'POST',\n      body: JSON.stringify(addComment),\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\"\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      return console.log(data);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"column-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }, \"View All Questions\"), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"element\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card bg-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 29\n    }\n  }, questions.map(function (q) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      class: \"accordion-item\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"title-color\",\n      key: q.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 41\n      }\n    }, q.asker == null ? \"Unknown\" : q.asker), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"question-style\",\n      key: q.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 45\n      }\n    }, q.question), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn bg-danger font-weight-bold text-white text-center m-4\",\n      value: \"Vote\",\n      onClick: function onClick() {\n        return question_vote(q.id, q.votes);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 45\n      }\n    }, \"Votes Count: \", q.votes == null ? \"0\" : q.votes), /*#__PURE__*/React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      className: \"form-style\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"textarea\", {\n      value: comment,\n      className: \"form-control form-control-lg\",\n      onChange: function onChange(e) {\n        return setComment(e.target.value);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 53\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      value: \"Submit A Comment\",\n      className: \"btn btn-success \",\n      onClick: function onClick() {\n        return submitComment(q.id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 53\n      }\n    }, \"Submit A Comment\"))));\n  })))))));\n}","map":{"version":3,"sources":["C:/Users/jano2187/Documents/GitHub/ReactTesting/front_end/src/pages/QuestionPage/ViewQuestions.js"],"names":["React","useState","useEffect","v4","uuidv4","ViewQuestions","questions","setQuestions","update","setUpdate","comment","setComment","fetch","then","res","json","data","question_vote","id","votes","newVotes","updatequestion","method","body","JSON","stringify","headers","console","log","submitComment","questionID","qID","addComment","map","q","asker","question","e","target","value"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport './ViewQuestion.css'\r\n\r\nexport default function ViewQuestions(){\r\n\r\n    const [questions, setQuestions] = useState([]);\r\n    const [update, setUpdate] = useState(0);\r\n    const [comment, setComment] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        fetch('http://localhost:9001/users/viewQuestion')  \r\n          .then(res => res.json())\r\n          .then(data => setQuestions(data))\r\n      }, [update])\r\n\r\n      const question_vote = (id, votes) =>{\r\n\r\n        var newVotes = votes == null ? 1 : votes + 1;\r\n\r\n        var updatequestion = {'id': id, 'votes': newVotes}\r\n        \r\n        fetch('http://localhost:9001/users/viewQuestion', \r\n            {\r\n                method:'PATCH', \r\n                body: JSON.stringify(updatequestion),\r\n                headers: {\r\n                  \"Content-Type\": \"application/json; charset=utf-8\",\r\n                }\r\n            })  \r\n          .then(res => res.json())\r\n          .then(setUpdate(update + 1))\r\n          .then(console.log(\"Vote count completed\"))\r\n    }\r\n\r\n    const submitComment = (questionID) =>{\r\n        var id = uuidv4();\r\n        var qID = questionID;\r\n        var addComment = {\r\n            'id': id, \r\n            'qID': qID, \r\n            'comment': comment\r\n        }\r\n\r\n        fetch('http://localhost:9001/comment/question_comment', \r\n            {\r\n                method:'POST', \r\n                body: JSON.stringify(addComment),\r\n                headers: {\r\n                  \"Content-Type\": \"application/json; charset=utf-8\",\r\n                }\r\n            })  \r\n          .then(res => res.json())\r\n          .then(data => console.log(data))\r\n      }\r\n\r\n    return(\r\n        <div>\r\n            <div class = \"header\">\r\n            <div class = \"column-text\">\r\n                <h1>\r\n                    View All Questions\r\n                    </h1>\r\n                <div class=\"element\">\r\n                        <div className=\"card bg-primary\">\r\n                            <div className=\"card-body\">\r\n                                    {questions.map(q =>\r\n                                    <div class=\"accordion-item\">\r\n                                        <div className='title-color' key={q.id}>{q.asker == null ? \"Unknown\":q.asker}</div>\r\n                                            <div className=\"question-style\" key={q.id}>{q.question}</div>\r\n                                            <button className=\"btn bg-danger font-weight-bold text-white text-center m-4\" value=\"Vote\" onClick={() => question_vote(q.id, q.votes)}>Votes Count: {q.votes == null ? \"0\":q.votes}</button>\r\n                                            <div>\r\n                                                <form className='form-style'>\r\n                                                    <textarea value={comment} className=\"form-control form-control-lg\" onChange={(e)=>setComment(e.target.value)}></textarea>\r\n                                                    <button value=\"Submit A Comment\" className=\"btn btn-success \" onClick={() => submitComment(q.id)}>Submit A Comment</button>\r\n                                                </form>\r\n                                        </div>\r\n                                    \r\n                                    </div>)}\r\n                        </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}