{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\jano2187\\\\Documents\\\\GitHub\\\\ReactTesting\\\\front_end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\jano2187\\\\Documents\\\\GitHub\\\\ReactTesting\\\\front_end\\\\src\\\\pages\\\\QuestionPage\\\\ViewQuestions.js\";\nimport React, { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from \"uuid\";\nimport './ViewQuestion.css';\nexport default function ViewQuestions() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      questions = _useState2[0],\n      setQuestions = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      update = _useState4[0],\n      setUpdate = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      comment = _useState6[0],\n      setComment = _useState6[1];\n\n  useEffect(function () {\n    fetch('http://localhost:9001/users/viewQuestion').then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      return setQuestions(data);\n    });\n  }, [update]);\n\n  var question_vote = function question_vote(id, votes) {\n    var newVotes = votes == null ? 1 : votes + 1;\n    var updatequestion = {\n      'id': id,\n      'votes': newVotes\n    };\n    fetch('http://localhost:9001/users/viewQuestion', {\n      method: 'PATCH',\n      body: JSON.stringify(updatequestion),\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\"\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(setUpdate(update + 1)).then(console.log(\"Vote count completed\"));\n  };\n\n  var submitComment = function submitComment(questionID) {\n    var id = uuidv4();\n    var qID = questionID;\n    var addResponse = {\n      'id': id,\n      'qID': qID,\n      'response': response\n    };\n    fetch('http://localhost:9001/comment/', {\n      method: 'POST',\n      body: JSON.stringify(addResponse),\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\"\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      return console.log(data);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"column-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, \"View All Questions\"), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"element\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }))));\n}","map":{"version":3,"sources":["C:/Users/jano2187/Documents/GitHub/ReactTesting/front_end/src/pages/QuestionPage/ViewQuestions.js"],"names":["React","useState","useEffect","v4","uuidv4","ViewQuestions","questions","setQuestions","update","setUpdate","comment","setComment","fetch","then","res","json","data","question_vote","id","votes","newVotes","updatequestion","method","body","JSON","stringify","headers","console","log","submitComment","questionID","qID","addResponse","response"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,OAAO,oBAAP;AAEA,eAAe,SAASC,aAAT,GAAwB;AAAA,kBAEDJ,QAAQ,CAAC,EAAD,CAFP;AAAA;AAAA,MAE5BK,SAF4B;AAAA,MAEjBC,YAFiB;;AAAA,mBAGPN,QAAQ,CAAC,CAAD,CAHD;AAAA;AAAA,MAG5BO,MAH4B;AAAA,MAGpBC,SAHoB;;AAAA,mBAILR,QAAQ,CAAC,EAAD,CAJH;AAAA;AAAA,MAI5BS,OAJ4B;AAAA,MAInBC,UAJmB;;AAMnCT,EAAAA,SAAS,CAAC,YAAM;AACZU,IAAAA,KAAK,CAAC,0CAAD,CAAL,CACGC,IADH,CACQ,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KADX,EAEGF,IAFH,CAEQ,UAAAG,IAAI;AAAA,aAAIT,YAAY,CAACS,IAAD,CAAhB;AAAA,KAFZ;AAGD,GAJM,EAIJ,CAACR,MAAD,CAJI,CAAT;;AAME,MAAMS,aAAa,GAAG,SAAhBA,aAAgB,CAACC,EAAD,EAAKC,KAAL,EAAc;AAElC,QAAIC,QAAQ,GAAGD,KAAK,IAAI,IAAT,GAAgB,CAAhB,GAAoBA,KAAK,GAAG,CAA3C;AAEA,QAAIE,cAAc,GAAG;AAAC,YAAMH,EAAP;AAAW,eAASE;AAApB,KAArB;AAEAR,IAAAA,KAAK,CAAC,0CAAD,EACD;AACIU,MAAAA,MAAM,EAAC,OADX;AAEIC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,cAAf,CAFV;AAGIK,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAHb,KADC,CAAL,CAQGb,IARH,CAQQ,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KARX,EASGF,IATH,CASQJ,SAAS,CAACD,MAAM,GAAG,CAAV,CATjB,EAUGK,IAVH,CAUQc,OAAO,CAACC,GAAR,CAAY,sBAAZ,CAVR;AAWH,GAjBC;;AAmBF,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,UAAD,EAAe;AACjC,QAAIZ,EAAE,GAAGd,MAAM,EAAf;AACA,QAAI2B,GAAG,GAAGD,UAAV;AACA,QAAIE,WAAW,GAAG;AAAC,YAAMd,EAAP;AAAW,aAAOa,GAAlB;AAAuB,kBAAYE;AAAnC,KAAlB;AAEArB,IAAAA,KAAK,CAAC,gCAAD,EACD;AACIU,MAAAA,MAAM,EAAC,MADX;AAEIC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeO,WAAf,CAFV;AAGIN,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAHb,KADC,CAAL,CAQGb,IARH,CAQQ,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KARX,EASGF,IATH,CASQ,UAAAG,IAAI;AAAA,aAAIW,OAAO,CAACC,GAAR,CAAYZ,IAAZ,CAAJ;AAAA,KATZ;AAUD,GAfH;;AAiBA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,KAAK,EAAG,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAK,IAAA,KAAK,EAAG,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADI,eAIA;AAAK,IAAA,KAAK,EAAC,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJA,CADA,CADJ,CADJ;AAcH","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport './ViewQuestion.css'\r\n\r\nexport default function ViewQuestions(){\r\n\r\n    const [questions, setQuestions] = useState([]);\r\n    const [update, setUpdate] = useState(0);\r\n    const [comment, setComment] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        fetch('http://localhost:9001/users/viewQuestion')  \r\n          .then(res => res.json())\r\n          .then(data => setQuestions(data))\r\n      }, [update])\r\n\r\n      const question_vote = (id, votes) =>{\r\n\r\n        var newVotes = votes == null ? 1 : votes + 1;\r\n\r\n        var updatequestion = {'id': id, 'votes': newVotes}\r\n        \r\n        fetch('http://localhost:9001/users/viewQuestion', \r\n            {\r\n                method:'PATCH', \r\n                body: JSON.stringify(updatequestion),\r\n                headers: {\r\n                  \"Content-Type\": \"application/json; charset=utf-8\",\r\n                }\r\n            })  \r\n          .then(res => res.json())\r\n          .then(setUpdate(update + 1))\r\n          .then(console.log(\"Vote count completed\"))\r\n    }\r\n\r\n    const submitComment = (questionID) =>{\r\n        var id = uuidv4();\r\n        var qID = questionID;\r\n        var addResponse = {'id': id, 'qID': qID, 'response': response}\r\n\r\n        fetch('http://localhost:9001/comment/', \r\n            {\r\n                method:'POST', \r\n                body: JSON.stringify(addResponse),\r\n                headers: {\r\n                  \"Content-Type\": \"application/json; charset=utf-8\",\r\n                }\r\n            })  \r\n          .then(res => res.json())\r\n          .then(data => console.log(data))\r\n      }\r\n\r\n    return(\r\n        <div>\r\n            <div class = \"header\">\r\n            <div class = \"column-text\">\r\n        <h1>\r\n            View All Questions\r\n            </h1>\r\n            <div class=\"element\">\r\n\r\n            </div>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}